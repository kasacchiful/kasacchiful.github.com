<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Kasacchiful's Blog]]></title>
  <link href="http://kasacchiful.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kasacchiful.github.com/"/>
  <updated>2014-07-21T16:46:05+09:00</updated>
  <id>http://kasacchiful.github.com/</id>
  <author>
    <name><![CDATA[kasacchiful]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Niigata.rb#3に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/09/05/niigatarb3/"/>
    <updated>2013-09-05T20:36:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/09/05/niigatarb3</id>
    <content type="html"><![CDATA[<p>Niigata.rb#3に参加しました。</p>

<p><a href="http://connpass.com/event/2589/">Niigata.rb &ndash; connpass</a></p>

<p>場所は新潟市立中央図書館（ほんぽーと）。
時折勉強するために利用しています。
研修室や講演ホールもあったりします。</p>

<p>私は「初心者向けrubyの実行環境構築」について発表しました。</p>

<p>主催の @dictav さんはじめ、
みなさん凄かったですよ。</p>

<!-- more -->


<h2>テスト駆動開発は みんなの心の中にある (@kenchan)</h2>

<p><a href="https://speakerdeck.com/kenchan/tdd-will-always-be-in-your-heart">発表スライド</a></p>

<p>テスト駆動開発をどのように捉えていて、何が大切だと感じているか。
また実際にコードを書くときに何を考えているのかのお話。</p>

<ul>
<li>簡単に何度も動かせる</li>
<li>問題を一つずつ解決できる</li>
<li>現在地を見失わない</li>
<li>利用者の視点で選択できる</li>
</ul>


<p>個人的には、「現在地を見失わない」というのが興味深かったです。
TDDBCには残念ながら参加できなかった自分としては、
TDDBCの例も面白かったです。</p>

<h2>初心者向けrubyの実行環境構築 (@kasacchiful)</h2>

<p>私の発表。発表していくうちに、なんだか初心者向けになっていないようなと気づく。
もう少しまとまっていれば良かったかも。
何かツッコミがあれば、ツッコんでください。</p>

<p><script async="true" class="speakerdeck-embed" data-id="b5118940f4390130e8753a0acc06b0ce" src="//speakerdeck.com/assets/embed.js"> </script></p>

<h2>エモい話かなにか (@upinetree)</h2>

<p>TideSDKというマルチプラットフォームデスクトップアプリが作れる
フレームワークのお話。</p>

<p>作ったアプリが<a href="https://github.com/upinetree/kancolle-launcher">艦これランチャー</a>。
「艦これ」がわからない私ですが、
TideSDK自体はなかなか面白そうなネタですね。</p>

<h2>RubyMotion (@jewel_x12)</h2>

<p>RubyMotionのお話。
こちらにも艦これネタが。w</p>

<p>さらにライブコーディングのおまけ付き。
ライブコーディングはさすがですね。
Niigata.rbだけど「Perl最高！」って事で。w</p>

<h2>Redmineプラグインのテスト書いてもらえませんか？ (@two_pack)</h2>

<p><a href="http://www.slideshare.net/twopackas/20130831-25767272">発表スライド</a>。</p>

<p>「誰かテスト書いてくれる人募集」との事。
プラグインは<a href="https://github.com/two-pack/redmine_xls_export">これ</a>。</p>

<p>xlsxで出力できるプラグインを新規で作った方が需要があるような気がする。</p>

<h2>LT</h2>

<p>ほとんどの参加者がLTをやるという展開。
自己紹介LTが多かったかなと思いましたが、
今回のNiigata.rbには新潟県外参加者が半数以上という、
とてもバリエーション豊かな人たちが集まったなと思いました。</p>

<h2>懇親会</h2>

<p>最後までいたかったけど、
私は所用で途中退席しました。
短い時間ながらも楽しかったです。</p>

<p>ちなみに、クロッシング問題などの話題が挙がったので、
もう締め切られたけれど試しにやってみました。

内容は前の記事に挙げておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロッシング問題を解いてみた]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/09/03/crossing/"/>
    <updated>2013-09-03T23:11:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/09/03/crossing</id>
    <content type="html"><![CDATA[<p>CodeIQにあったクロッシング問題。</p>

<p>この前のNiigata.rbの懇親会でも話題になったので、
このためにCodeIQのアカウント作ってやってみたら、
もう締めきりになっていたので、
個人的にやってみました。</p>

<p>元ネタは<a href="https://codeiq.jp/ace/yuki_hiroshi/q432">こちら</a>。</p>

<!-- more -->


<h2>実行環境</h2>

<ul>
<li>MacBook Air (Mid 2013)</li>
<li>MacOS X 10.8.4</li>
<li>Ruby 2.0.0-p195</li>
</ul>


<h2>考え方1</h2>

<p>まずは、以下のように考えてみました。</p>

<ol>
<li>素子数分の要素を持つ配列aを作成する。

<ul>
<li>[1,2,3,&hellip;,n]</li>
</ul>
</li>
<li>ファイルの素子番号順に、binary searchをして配列aのindexを得る。

<ul>
<li>indexは 0..n-1ですね。</li>
</ul>
</li>
<li>配列aから要素番号に該当する要素を削除する</li>
<li>各々得られたindexを加算すると、求める値が得られる。</li>
</ol>


<p>コードは以下。</p>

<p>```ruby
start_time = Time.now</p>

<p>def bsearch(ary, key, left, right)
  return nil if left > right
  mid = (left + right) / 2
  key &lt; ary[mid] ? (right = mid &ndash; 1) : (left = mid + 1)
  key == ary[mid] ? mid : bsearch(ary, key, left, right)
end</p>

<p>fname = &ldquo;./crossing.txt&rdquo;</p>

<p>File.open(fname, &ldquo;r&rdquo;) do |f|
  j = f.read.count(&ldquo;\n&rdquo;)
  f.rewind</p>

<p>  tops = [*1..j]
  cross = 0
  f.each do |line|</p>

<pre><code>n = line.chomp.to_i
j -= 1
i = bsearch(tops, n, 0, j)
cross += i
tops.delete_at(i)
</code></pre>

<p>  end</p>

<p>  puts cross
end</p>

<p>puts Time.now &ndash; start_time
```
交差点数は24,689,222,839。<br/>
実行速度は約9.9秒。</p>

<p>プロファイリングをすると、やはり、binary search と delete_at で時間がかかっています。</p>

<p>別のアルゴリズムを考える必要がありそうです。</p>

<h2>考え方2</h2>

<p>出力元と出力先の素子番号が同じように並んでいるのであれば、交差点はありません。
しかし、そのうち2つが入れ替わっていると、交差点は1つ発生します。</p>

<p>そこで、出力先の素子番号のファイルを読み込んで
それがソート中に数値が入れ替わった分が交差点数になると考えました。</p>

<p>今回はマージソートでやってみました。</p>

<p>コードは以下。
マージソートの部分はWikipediaからパクりました。(^^)</p>

<p>```ruby
start_time = Time.now
@cross = 0</p>

<p>def merge_sort lst
  return msort lst.dup
end</p>

<p>def msort lst
  return lst if (len = lst.size) &lt;= 1</p>

<p>  lst2 = lst.pop(len >> 1)
  return merge(merge_sort(lst), merge_sort(lst2))
end</p>

<p>def merge lst1, lst2
  len1, len2 = lst1.size, lst2.size
  result = Array.new(len1 + len2)
  a, b = lst1.first, lst2.first
  i, j, k = 0, 0, 0</p>

<p>  loop do</p>

<pre><code>if a &lt;= b
  result[i] = a
  i += 1; j += 1
  break unless j &lt; len1
  a = lst1[j]
else
  @cross += (len1 + k - i)
  result[i] = b
  i += 1; k += 1
  break unless k &lt; len2
  b = lst2[k]
end
</code></pre>

<p>  end</p>

<p>  while j &lt; len1 do</p>

<pre><code>result[i] = lst1[j]
i += 1; j += 1
</code></pre>

<p>  end
  while k &lt; len2 do</p>

<pre><code>result[i] = lst2[k]
i += 1; k += 1
</code></pre>

<p>  end</p>

<p>  return result
end</p>

<p>fname = &ldquo;./crossing.txt&rdquo;</p>

<p>a = []
File.open(fname, &ldquo;r&rdquo;) do |f|
  f.each do |line|</p>

<pre><code>a &lt;&lt; line.chomp.to_i
</code></pre>

<p>  end</p>

<p>  merge_sort a
  pp @cross
end</p>

<p>puts Time.now &ndash; start_time
```
交差点数は24,689,222,839。<br/>
実行速度は約1.7秒。</p>

<p>これで、速度要件は満たしました。
でも、クロッシング社の要求は速ければ速いほどいいということなので、
もっと速いアルゴリズムを考えた方がいいのでしょうけれど、
とりあえずこれまでとします。</p>

<h2>JRubyで実行してみる</h2>

<p>考え方1をJRuby 1.7.4(1.9.3p392)で実行してみると、
実行速度は約6.8秒。</p>

<p>考え方2を同じようにJRuby 1.7.4で実行してみると、
実行速度は約2.4秒。</p>

<p>考え方1はJRubyが速いけど、考え方2はRubyが速いのは、なかなか興味深いですね。</p>

<h2>まとめ</h2>

<p>結局、解答は提出できなかったので、本当にあっているのかどうかはわかりません。
また、Cなどruby以外の言語であれば、実行速度は変わってくると思います。</p>

<p>最近プログラミングしてなかった自分としては、
他の言語についてじっくり考える余裕がなかったのは残念です。
でも、速度向上を得るためにアルゴリズムについて考えることは最近できてなかったので、
とても参考になりました。</p>

<p>別のアルゴリズムでさらに効率的にできるのであれば、学びたいと思います。</p>

<p>アルゴリズムは奥が深い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS31に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/04/12/nds31/"/>
    <updated>2013-04-12T16:15:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/04/12/nds31</id>
    <content type="html"><![CDATA[<p>第31回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no31">第31回勉強会(2013/04/06) &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは「はじめての～」ということで、
春に入学や入社した方に対しての内容が集まりました。
とはいえ、参加者のほとんどが（私を含め）どうみてもベテランな雰囲気の方ばかり。
それでも発表内容はとても面白かったです。</p>

<!-- more -->


<h2>感想</h2>

<p>いろいろありましたけど、個人的にはWindows ストアアプリ開発が特に面白かった。
NDSの会場に行く直前にWindows 8 proを個人的に購入したため、
「Windows ストアアプリ」への関心がぐっとくるものがありました。
Surfaceかっこいい！
Visual Studio Expressも導入しなきゃ。</p>

<p>あと、テスト技法入門も @two_pack さんが
簡単にまとめてくれたので（実際には技法についてはほとんどしゃべっていないけど）
非常にわかりやすかったです。</p>

<h2>私も発表</h2>

<p>NDSには2回目の参加なのですが、私も発表しました。
参加申込の際に書いた欄の中で、
発表について「時間があればRubyについてしゃべります」と書いちゃったもんだから、
Twitterで「Rubyの発表してくださいよ～」とつぶやかれ、
発表日当日にせこせことスライドを作るという状況になったわけです。</p>

<p>私の発表内容は、「私のRubyの始め方」と題して、
私がRubyをはじめたきっかけと、どのように学習してきたかについて
簡単に発表しました。</p>

<p><script async="true" class="speakerdeck-embed" data-id="9a5f434083f301307e181231392d897a" src="//speakerdeck.com/assets/embed.js"> </script></p>

<p>当日にスライドつくるような状況ですので、自分でいうのもなんですが、
あまりまとまっていないと思います。
発表自体もぐだぐだだったような…。</p>

<p>内容自体は結構古い内容もあります。</p>

<p>簡単にまとめると、</p>

<ul>
<li>何かのきっかけで興味がわきます</li>
<li>私の場合は、勉強会がきっかけ</li>
<li>勉強会のあとは、書籍と雑誌でこつこつと</li>
<li>「とりあえずやってみる」という精神が大事</li>
</ul>


<p>何かのきっかけや出会いによって、
「Rubyはじめた！」「Perlはじめた！」「勉強会参加した」
となって、人は動いていくのではないかと自分は信じています。
自分がNDSに参加したきっかけも
「Niigata.rb」と「NDB（新潟開発者忘年会）」に参加したことから生まれたものです。</p>

<p>これをきっかけにしてRubyを始めてくれる人がいればうれしいかぎりです。</p>
]]></content>
  </entry>
  
</feed>
