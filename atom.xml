<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kasacchiful's Blog]]></title>
  <link href="http://kasacchiful.github.com/atom.xml" rel="self"/>
  <link href="http://kasacchiful.github.com/"/>
  <updated>2014-07-21T17:11:02+09:00</updated>
  <id>http://kasacchiful.github.com/</id>
  <author>
    <name><![CDATA[kasacchiful]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2年前に作ったものを今更ながら公開しました]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/07/21/bingo_sample/"/>
    <updated>2014-07-21T17:00:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/07/21/bingo_sample</id>
    <content type="html"><![CDATA[<p>先日のNDS#36のLTでしゃべった内容について、
ようやくGitHubにアップしましたので、説明します。
かなり期間が空いてしまったのは、反省点。</p>

<!-- more -->


<h2>何を作ったのか？</h2>

<p>ビンゴゲームで、あたった番号を表示するアプリです。
また景品の画像も表示できるようにしてます。</p>

<p>サンプルは<a href="https://github.com/kasacchiful/bingo_sample">GitHub</a>に公開しています。</p>

<h2>なぜ作ったのか？</h2>

<p>NDS#36のLTでしゃべったのですが、時間がほとんどない状況だったので、
詳しくしゃべれませんでした。</p>

<p>結婚式の2次会用に作ったものです。
今まで、結婚式2次会幹事を4回やっておりますが、余興を考えていると、
あんまり凝った内容のものは、参加者はお酒が入って酔っ払っているため、さっぱり覚えきれなくてつまらくなってしまうんです。</p>

<p>3回目の2次会幹事の際に、「適当ビンゴ」なるものをやりました。（ググるといろいろ出てきます。）
これは、新郎新婦にゆかりのある数字や、司会者の判断（時間的な都合等）で、
一気に複数の数字があたるようなビンゴになっています。</p>

<p>ビンゴマシーンいらずで、ビンゴカードのみで実施できるのですが、
参加人数が100人規模だったので、
何番が該当するのか口頭だけだと伝わりにくいなぁということと
何番がまだコールされていないかが司会者が判断しにくいということで、
「会場のプロジェクタやモニタ使って、番号を表示してしまえばいいじゃん」
ということになりました。</p>

<p>さくっとできそうだったので、私が2時間程度で作ってしまいました。
（内1時間は画像作成）</p>

<h2>使い方</h2>

<p>ただのHTMLなので、ブラウザで開いて、お使いください。</p>

<h3>入手先</h3>

<p>まずは、<a href="https://github.com/kasacchiful/bingo_sample">GitHub</a>から、ダウンロードしてください。
ダウンロードの仕方がわからない方は、右側メニューの下側にある「Download ZIP」をクリックし、
ダウンロードしたzipファイルを解凍します。</p>

<p>ダウンロードリンクも <a href="https://github.com/kasacchiful/bingo_sample/archive/master.zip">ここ</a> に貼っておくので、
ここからダウンロードしてもかまいません。</p>

<h3>起動方法</h3>

<p>番号の横並び、もしくは、縦並びがあります。
index.html もしくは vertical.html をブラウザで開いてください。
ブラウザで開いたら、URL表示部分等を隠すために、全画面表示することをオススメします。</p>

<h3>初期状態へ戻す</h3>

<p>ブラウザの再表示（F5など）で、最初の表示に戻ります。</p>

<h3>終了方法</h3>

<p>ブラウザを閉じるだけです。</p>

<h2>画像の差替</h2>

<p>景品画像等を表示するために、
画面左側にマウスカーソルを合わせると
リンクがにょきっと出てきます。</p>

<p>リンクをクリックすると、画像がモーダル風に表示されます。</p>

<p>黒背景部分をクリックすると、画像が非表示になり、元に戻ります。</p>

<p>GitHubにあるのは、サンプル画像なので、
適宜差し替えてご使用ください。</p>

<h3>画像の保存場所</h3>

<p>imagesディレクトリ内に保存してください。</p>

<h3>画像の呼び出し変更</h3>

<p>index.htmlもしくはvertical.htmlの以下の部分を
テキストエディタで編集します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&#39;navigation&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&#39;A&#39;</span><span class="nt">&gt;&lt;a</span> <span class="na">title=</span><span class="s">&#39;A賞&#39;</span> <span class="na">class=</span><span class="s">&#39;openmodalbox&#39;</span> <span class="na">href=</span><span class="s">&#39;images/A.jpg&#39;</span><span class="nt">&gt;</span>A賞<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&#39;B&#39;</span><span class="nt">&gt;&lt;a</span> <span class="na">title=</span><span class="s">&#39;B賞&#39;</span> <span class="na">class=</span><span class="s">&#39;openmodalbox&#39;</span> <span class="na">href=</span><span class="s">&#39;images/B.jpg&#39;</span><span class="nt">&gt;</span>B賞<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&#39;C&#39;</span><span class="nt">&gt;&lt;a</span> <span class="na">title=</span><span class="s">&#39;C賞&#39;</span> <span class="na">class=</span><span class="s">&#39;openmodalbox&#39;</span> <span class="na">href=</span><span class="s">&#39;images/C.jpg&#39;</span><span class="nt">&gt;</span>C賞<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>href='images/A.jpg'</code>部分に画像ファイル名を、<code>A賞</code>部分に画面に表示されるリンク名（景品名等）を各々変更してください。
景品の数が多い場合は、<code>&lt;li</code>から始まる1行をコピペして景品数分並べてください。</p>

<h2>今後の予定？</h2>

<p>せっかく公開したので、何か作りたい。
自分の勉強のために、Webサービス化してもいいかも。</p>

<p>後は、タブレット対応して、番号を押しやすくしてみたい。</p>

<h2>注意</h2>

<p>本アプリケーションによって生じるいかなる損失等は、当方は一切の責任を持ちません。
特に、画像の呼び出し変更部分の際に、誤ってアプリケーションが動かなくなる等の事が発生することが想定されますが、
当方は一切のサポートはできません。
HTMLに詳しい身内の方に修正をお願いしてください。</p>

<p>また、動作環境はMac版のGoogle Chromeで行っています。
Google ChromeおよびMozilla Firefoxで動作しますが、
Microsoft Internet Explorerでは動作しません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS meetup in Niigataに参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/07/13/ndsmeetup1/"/>
    <updated>2014-07-13T22:45:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/07/13/ndsmeetup1</id>
    <content type="html"><![CDATA[<p>第1回NDS in Niigataに参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/nino1">第1回 新潟出張版(2013/07/13) &ndash; 長岡 IT開発者 勉強会(NDS)</a>
<a href="http://connpass.com/event/7331/">NDS in Niigata #1 &ndash; connpass</a>
<a href="https://github.com/NagaokaDevelopersStudy/Studies/blob/master/NDSMeetUp%231.md">Studies/NDSMeetUp#1.md at master · NagaokaDevelopersStudy/Studies · GitHub</a></p>

<p>NDSは普段新潟県長岡市で開催されるんですけど、
今回は新潟出張版として、第1回が新潟市で開催されました。
今回のテーマは、自由ということでいろんな内容がありました。
自分も発表しています。</p>

<p>今回の初開催でいろいろ準備なされた主催者の@npoiさんと@dictavさんに感謝です。
おつかれさまでした。</p>

<!-- more -->


<h2>簡単なDevOps入門 (@npoi)</h2>

<p>今回の主催者の一人、@npoiさんの発表。</p>

<p>DevOpsをとりまく環境についての概要といったところか。
Infratasterとか試してみたいものがいろいろあって、興味がわいてくる。</p>

<h2>主婦とChef (@sambaiz)</h2>

<p>資料は<a href="http://www.slideshare.net/sakataiki/nds-chef">こちら</a></p>

<p>Chefについての、お話。</p>

<p>冒頭から「主婦とChef」の物語に引き込まれそうになった。
なかなか面白かったです。</p>

<h2>コマンドラインツール今昔 (@hayajo)</h2>

<p>資料は<a href="https://gist.github.com/hayajo/4a07fa6f33630b743412">こちら</a></p>

<p>新しくなったコマンドラインツールのお話。
ifconfigとかよく使うオジサンですけど、今や時代遅れ。
今どきのヤングになめられないように、ナウなツールを使わないとね。</p>

<p>CentOS7はこれから触って試す人なので、
いろいろ試してみます。</p>

<h2>カラダ改造計画（序章） (@kasacchiful)</h2>

<p>資料は<a href="https://speakerdeck.com/kasacchiful/nds-meetup-in-niigata-number-1">こちら</a></p>

<p>私の発表。技術的な内容は全然ない発表ですみません。
現在実施中の、カラダ改造計画の最初のイテレーション終了時期と
NDS開催時期がちょうど合わさったので、
LTでも良かったのですが、しゃべってしまいました。</p>

<p>内容としては、大したこといってませんが、</p>

<ul>
<li>カラダ改造計画とシステム開発計画は一緒</li>
<li>NDS等のいろんな勉強会の内容を自分なりに取り入れて、実践してみよう</li>
<li>何か面白いことがあったら、NDSで発表してみよう</li>
</ul>


<p>あたりをつかんでくれるとありがたいです。</p>

<h2>脆弱性の報告制度についてあれこれ (@ooooooo_q)</h2>

<p>脆弱性の報告についてのお話。</p>

<p>脆弱性を知ることや攻撃方法を知ることは、
それに伴って防御方法も知ることに繋がるので、
気に掛ける必要がある部分だと思う。
焼肉おごるとか、少しほっこりしていいな。</p>

<p>「脆弱性大好き」っておいwですが。</p>

<h2>安全な&#8221;○○でログイン&#8221;の作り方 (@gonchan93)</h2>

<p>資料は<a href="http://www.slideshare.net/ritou/secure-social-loginatndsniigata1-36922216">こちら</a></p>

<p>CPAN Autherの@gonchan93さんの発表。
OAuthやOpenIDに関するログインのセキュリティまわりのお話。
気を付けないと脆弱性突かれちゃうから、意識しないと難しいね。
参考になります。</p>

<p>ちなみに、YAPC2014でも、しゃべるそうです。</p>

<h2>Swiftに関する何か (@dictav)</h2>

<p>資料は<a href="https://speakerdeck.com/dictav/swiftwoshao-sidake">こちら</a></p>

<p>今回の主催者の一人、@dictavさんの発表。
最近話題のSwift言語の概要についての話。</p>

<p>iOSプログラマなら、少しは触ってみるのはアリかな？
自分はそれほどiOSプログラミングしたことないけど、いい感じで記述できそうな雰囲気がある。
Objective-Cからの移行とか、自分は気にする必要がないので、
今度iOSプログラミングする必要に迫られた場合は、Swiftで書くかも。</p>

<h2>iBeacon (@circled9)</h2>

<p>ここからLT枠。</p>

<p>資料は<a href="http://www.slideshare.net/circled9/ibeacon-36954299">こちら</a></p>

<p>iBeacon試してみましたという話。</p>

<p>iBeacon側でセキュリティを担保してはいけないとか、
この辺りは、実際に構築する際に気を付けないといけないことだね。</p>

<h2>私の自炊スタイル (@bnosuke)</h2>

<p>@bnosukeさんが実践している、自炊のお話。</p>

<p>いつもながら、いい声とわかりやすい説明、参考になります。</p>

<h2>懇親会</h2>

<p>いつもより早めの17時くらいから、新潟駅前の居酒屋で懇親会。</p>

<p>私の発表は、@mazhulinさんに気に入ってもらって、
結構お話させていただきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChromeでURLルートディレクトリにfavicon.icoが無いとセッション切れする]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/06/18/chrome_favicon/"/>
    <updated>2014-06-18T22:55:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/06/18/chrome_favicon</id>
    <content type="html"><![CDATA[<p>タイトルの件が発生したので、メモ。</p>

<h2>Chromeでセッション切れ発生</h2>

<p>とあるWebシステムで、Chromeでアクセスした際に、ログイン後の画面から別の画面へのリンクをクリックすると、ログイン画面に戻される。
再ログインした後の画面から別の画面へのリンクをクリックすると、またログイン画面に戻される。</p>

<p>開発環境では発生せず、ステージング環境で発生してしまう。</p>

<!-- more -->


<h2>とりあえず、Cookieを見る</h2>

<p>ChromeのデベロッパーツールでCookieの値を確認してみる。
ログイン後の画面でのセッションキーの値と、リンクをクリックした際に戻されたログイン画面でのセッションキーの値に相違があることが判明。
セッションキーの値が変わっているので、ログインセッションが切れたようです。</p>

<p>原因がさっぱりわからなかったので、google先生に聞いてみました。</p>

<h2>favicon.ico が原因？</h2>

<p>google先生に聞いてみると、
どうやらfavicon.icoが無いとセッション切れするらしい。</p>

<p>chromeでは、linkタグにfavicon.icoの指定がなければ、
URLルート直下にfavicon.icoにあるものと判断し、そこから取得しようとするようです。</p>

<p>favicon.icoファイル自体は存在していて、
開発環境ではURLルート直下にあるので、開発環境ではChromeでログインセッションが保たれているようです。
ステージング環境ではサブディレクトリ配下でアプリケーションが動いているため、
URLルート直下ではなく、サブディレクトリにfavicon.icoがあるからステージング環境で発生してしまう。</p>

<p>例えば、linkタグでfavicon.icoを指定してあげるようにすると、解決する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link rel="shortcut icon" href="http://kasacchiful.github.com/hoge/foo/bar/favicon.ico" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>開発環境とステージング環境では、favicon.icoのURLが異なるため、
そこはうまいこと指定できるようにしてあげました。</p>

<p>本アプリはRailsだったので、<code>favicon_image_tag</code>ヘルパーを使って対応しました。
Rails3以降で使えるヘルパーなので、
Rails2以前では、<code>ActionController::Base.relative_url_root</code>や<code>request.relative_url_root</code>等をうまく使って対応できそう。</p>

<p>それにしても、favicon.ico取得で404エラーすると、セッション切れちゃうのは、
何だか気持ち悪いですけどね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS36に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/03/15/nds36/"/>
    <updated>2014-03-15T12:45:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/03/15/nds36</id>
    <content type="html"><![CDATA[<p>第36回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no36">第36回勉強会(2013/03/15) &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは、「Go言語といろいろな言語たち」。
ボリュームが多すぎて、まとめきれません。すみません。
勉強会も終了時間ぎりぎりで終了となりました。</p>

<!-- more -->


<h2>メインセッション</h2>

<h3>Go言語入門 (@hayajo)</h3>

<p>資料は<a href="https://gist.github.com/hayajo/9559874">Gistにあります</a>。</p>

<p><a href="http://play.golang.org">Go Playground</a>でブラウザで動作検証可能との事。
発表中にも、ここに書かれたソースコードの説明等をしていただき、分かりやすかったです。</p>

<p>個人的には、&#8221;C言語を使いやすくした&#8221;印象を持ちました。
まずは、<a href="http://play.golang.org">Go Playground</a>で、いろいろいじってみようかな。</p>

<h2>サブセッション</h2>

<p>一応、但し書きとして、</p>

<blockquote><p>1言語につき何人話してOKです！
レガシーでも最新でも、初級から上級まで「言語」をテーマに含めてくれればなんでもOKです。
（ただなにもその知識がない人向けにも、さわりだけでも話してもらえると助かります）</p></blockquote>

<p>となっておりました。私も発表しております。</p>

<h3>Java7 や Java8 が僕らの目に優しくなってきている (@Nkzn)</h3>

<p>資料は<a href="http://www.slideshare.net/Nkzn/nds36-java7java8">こちら</a></p>

<p>Java7 とか Java8 とか、以前と比べて記述量が少なくなって、
確かに読みやすくなっている印象。</p>

<h3>Objective-C (@dictav)</h3>

<p>資料は<a href="https://speakerdeck.com/dictav/nds36-objective-c">こちら</a></p>

<p>Objective-Cは、最近ほとんど触らないけど、
今後使いそうな予感がするので、後で勉強しようっと。</p>

<h3>ちょこっとPython (@civic)</h3>

<p>資料は<a href="http://www.slideshare.net/fbcivic/36python">こちら</a></p>

<p>Pythonのドキュメントすごいな。</p>

<h3>プログラミングTeX (@neruko3114)</h3>

<p>資料は<a href="http://www.slideshare.net/hidetsugutamura/tex-32340082">こちら</a></p>

<p>こんなTeX見たことないよ～。
昔、論文やプレゼンで使ったことあるけど、
剰余演算に解説が必要な、ある意味「きもちわるい」プログラミングは新鮮でした。
こんな使い方もあったんだね。</p>

<p>ちなみに、発表者の資料もTeXで作成との事。</p>

<h3>Java8 Date and Time API (@gonchan93)</h3>

<p>Java8 から使える Date API と Time API についての説明。</p>

<p>がっつりJavaプログラミングしたのは、もう10年以上前（確かJava 1.2だったような気がする）だから、
「昔はどうだったっけ」と思い出しながら、そんなに苦労してたんだと改めて思った。</p>

<p>ここで少し休憩を挟んで、次へ。</p>

<h3>サポートベクターマシン入門 〜金貨の真贋を見分けよう〜 (@salinger001101)</h3>

<p>資料は<a href="https://github.com/Salinger/svm_gold">こちら</a></p>

<p>もうちょっと勉強しないと、理解するのが難しいな。
面白そうなのはわかる。
Rも使ってみたいし、統計学勉強しようかな。</p>

<h3>Kotlin 可愛いよ Kotlin (@Nkzn)</h3>

<p>資料は<a href="http://www.slideshare.net/Nkzn/nds36-kotlin-cute">こちら</a></p>

<p>ほぼ「Scala」らしい。新しい言語。
フィンランド語で「やかん」の意味。</p>

<p>Javaより書きやすいかも。
JVM上で動く言語が結構増えてきているから、</p>

<h3>はじめてのRuby (@dictav)</h3>

<p>資料は<a href="https://speakerdeck.com/dictav/ruby">こちら</a></p>

<p>Rubyについて、分かりやすく説明していただきました。
初級者に対して教える際に、参考にしていこうと思います。</p>

<h3>Ruby の Curry を少し食べてみた (@kasacchiful)</h3>

<p>資料は<a href="https://speakerdeck.com/kasacchiful/nds-36-rubycurry">こちら</a></p>

<p>私の発表。Rubyでカリー化をしてみた話です。
Rubyというよりは、カリー化の話ですね。</p>

<p>カレーをおいしくいただくためには、まずは
カレー自体をおいしく作る必要があるので、
カリー化もおいしくいただくためには、
カリー化するための場がうまく構成されてないと、
おいしくいただけないよなぁという気がしております。</p>

<h3>計量マークアップ言語 (@NPoi)</h3>

<p>markdownとかのお話。</p>

<p>markdownとか、HAMLとかいろいろ使っているけど、
まだまだ知らない言語があるみたいで、
参考になります。</p>

<h2>LT</h2>

<p>もうすでに、時間がおしている…。</p>

<h3>コミュニケーションツール (@upinetree)</h3>

<p>資料は<a href="https://speakerdeck.com/upinetree/hubot-plus-idobatadetimufalsekomiyunikesiyonwojia-su-saseru">こちら</a></p>

<p>「Hubot」と「idobata」を使って、
社内コミュニケーションを促進させるツールを使ってみたというお話。
ちなみに、「Hubot」は「ヒューボルト」と読むらしい。</p>

<p>チームみんなでキャラ育てて、愛着をもつっていう発想いいな。
面白そう。そんな環境で仕事してみたい。
@upinetreeさんもイキイキしてて、良かった。</p>

<h3>Redmine (@bnosuke)</h3>

<p>タスク管理にRedmine使ってみたというお話。
自分も、仕事でもプライベートでも使っております。</p>

<h3>2年前に作ったものを今更ながら公開します (@kasacchiful)</h3>

<p>時間がもう1分くらいしかなかったので、実演など余計な説明は一切なし。
速攻でしゃべりました。</p>

<p>発表の際に説明したアプリについては、別のページで解説する予定。</p>

<h2>懇親会</h2>

<p>今回はビアバッシュではなく、長岡市内の居酒屋で飲んで食べて騒ぎました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS35に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/01/18/nds35/"/>
    <updated>2014-01-18T12:45:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/01/18/nds35</id>
    <content type="html"><![CDATA[<p>第35回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no35">第35回勉強会(2013/01/18) &amp; 新潟開発者新年会(NDS) &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは、「設計（≒デザイン）の話をしよう」。
ゲストスピーカー3本とLTの構成になっております。</p>

<!-- more -->


<h2>所感（というかメモ）</h2>

<p>所感を書こうと思ったけど、うまくまとめきれないので、
備忘録的なメモ書きが中心です。</p>

<h3>設計（≒デザイン）の話をしよう (@masaru_b_cl)</h3>

<!-- 高野将 さま -->


<p>まずは、高野さん (@masaru_b_cl) の発表から。
スライドは<a href="http://www.slideshare.net/masaru_b_cl/nds35">こちら</a>。
<a href="http://takanosho.wordpress.com/2014/01/21/nds35/">ブログ</a>にも解説がありました。</p>

<p>高野さんの経験から設計（≒デザイン）について「当たり前」の話をしゃべるとのこと。</p>

<p>設計（≒デザイン）とは「ソリューション」である
ソリューション（問題解決）
「何を」「どのように」「どうやって」
「どのように」は「どのようにするために」といった目的に近い感じかな。</p>

<h4>設計の進め方</h4>

<ol>
<li>目的の明確化</li>
<li>ゴールの設定</li>
<li>対応手段の決定</li>
</ol>


<p>目的の明確化については、「何が問題か」という、
問題解決の前に問題発見を見極める必要があるということ。</p>

<p><a href="http://www.amazon.co.jp/dp/4320023684">ライト、ついてますか</a>あたりを
もう一度読み直してみよう。
このあたりが「何が問題か」のアプローチのヒントになるはず。
そして、原因や前提条件等も明確化する必要がある。</p>

<p>問題を明確化した後はゴールの設定。そして、対応手順の決定。</p>

<p>このあたりを短いスパンで回していくのが良さそう。
発表でも「小さく繰り返すことで洗練される」とあったので、
KPT、PDCA等でふりかえりしながらやっていく。</p>

<h4>設計の重要ポイント</h4>

<ol>
<li>一貫性</li>
<li>トレードオフ</li>
<li>アフォーダンス</li>
<li>スキルである</li>
</ol>


<p>「設計はスキルだ」は、結構重要かな。
また、アフォーダンスについては、
この世の原理、原則みたいなものに反しないようにすることかな？
これに反することが特長となりうる利点なのか、やっぱり欠点なのかは、肝なのかもしれません。</p>

<p>一貫性については、<a href="http://japanese.joelonsoftware.com/">Joel on Software</a>第五章をもう一度読み直してみよう。</p>

<!-- [Joel on Software](http://www.amazon.co.jp/dp/4274066304) -->


<h4>設計する上での課題</h4>

<ol>
<li>どこから設計する？</li>
<li>どこまで設計する？</li>
<li>ゴールの設定はどうやる？</li>
<li>意識の外の問題はどうする？</li>
<li>完全には防げないよね？</li>
</ol>


<p>この辺りは「設計はスキルである」ということから、
繰り返しながら少しずつ身に付ける必要がありそう。
今回の発表内で挙がった内容や、各種書籍で挙げられているパターンやツールを使いながら、
時間がかかってでもやらなければならないと感じました。</p>

<p>あまりにもおかしな設計にならないためにも、
短いスパンでふりかえりが必要なのかな。</p>

<h4>以下、メモ</h4>

<ul>
<li>設計の一貫性とは？

<ul>
<li>一貫性から標準化が生まれる</li>
<li>『標準化を守ってるから一貫性があるのではなく、一貫性を保つための指針が標準化なんだよ！』</li>
<li>「一貫性」「バランス」って便利な言葉だ</li>
</ul>
</li>
<li>「守破離」

<ul>
<li>物事の本質を理解していなければ、「守破離」はできない。</li>
<li>においとかも「なぜにおうのか」を言語化できなければ、</li>
</ul>
</li>
<li>yagn

<ul>
<li>守るとどこまでやればいいのかわからなくなる</li>
<li>ゴールの線引きが難しい

<ul>
<li>問題を改めて考えてみるのがよいかも</li>
<li>優先度をつけてみる</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>最後の質疑応答で「魂」の話になったりして、面白かった。</p>

<h3>ソフトウェア開発のInput→Architecture→Structure</h3>

<!-- 尾上雅則 さま -->


<p>つぎに、尾上さん (@ugaya40) の発表。
MVVMの人ですね。</p>

<!--
http://ugaya40.net
-->


<p>パターンなんだけど、パターンにはまらないなどのお話</p>

<h4>以下、メモ</h4>

<p>以下、発表で心に残ったものをメモ。</p>

<ul>
<li>ソフトウェア開発の理想

<ul>
<li>Input &ndash;> Structure</li>
</ul>
</li>
<li>ソフトウェア開発の現実

<ul>
<li>Input &ndash;> 複雑さに対する各種対処（Architecture）-> Structure</li>
</ul>
</li>
</ul>


<p>「Architecture が Structure を定義する！」ってなるほどと思った。</p>

<ul>
<li>Architectureとは、
  すべての複雑さに対する対処のこと。工学的には「関心事の分離」。</li>
<li>アプリケーションはそもそもドメイン（問題領域）に対するソリューションである。</li>
<li>Architecture Pattern

<ul>
<li>アーキテクチャ記述の一種

<ul>
<li>GoFのあれとかはStructure Pattern</li>
</ul>
</li>
<li>GUI Architecture Pattern など</li>
</ul>
</li>
<li>例：MVC

<ul>
<li>MVC系

<ul>
<li>MVC系の何がViewpointで何がViewなのか</li>
<li>Viewpoint: Presentation Domain Separation

<ul>
<li>プレゼン部分とそれ以外の部分にわけるだけの視点</li>
</ul>
</li>
<li>View:

<ul>
<li>各プラットフォームで異なるMVC</li>
<li>PDSの視点を適用した結果がMVCの各プラットフォームで異なる図になる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Architecture記述はStructure記述ではない

<ul>
<li>アーキテクチャ設計=関心事の分離のための記述だから、
  Viewpoint（視点）ありきでView（アーキテクチャ記述のview）がある。</li>
</ul>
</li>
<li>SIerのWebシステムとかは「Transaction Script」。</li>
<li>C/Sやスマホアプリ等のリッチクライアントとかは状態管理しなきゃいけないので、
  Transaction Scriptでは破綻する。</li>
<li>いろんなアプローチがある。</li>
</ul>


<h4>まとめ</h4>

<ul>
<li>アーキテクチャは複雑さへの対処

<ul>
<li>アプローチは関心事の分離。</li>
</ul>
</li>
<li>アーキテクチャの表現のされ方

<ul>
<li>アーキテクチャを単一のViewで記述できない</li>
<li>アーキテクチャは複数のViewpointとViewで構成されるアーキテクチャ記述で表現される</li>
</ul>
</li>
</ul>


<p>マーティンファウラーの「Presentation Domain Separation」は
後日読んでみようかな。</p>

<p>発表内容は、自分の知る「アーキテクチャ」の概念が実は誤りだったかもしれないので、
聞いてて混乱してきた部分が多い。
いろいろ調べて理解しないと、やばいなこりゃ。</p>

<h3>組織設計の基礎理論と実践</h3>

<!-- 松岡梨沙 さま -->


<p>最後に、Matsuki**さん (@liliput) の発表。</p>

<p>発表について、ブログでまとめられております。
<a href="http://lllagoon.hatenablog.com/entry/2014/01/23/145805">長岡で話したこと / 話さなかったこと #NDS35  &ndash; エルの楽園</a></p>

<h4>以下、メモ</h4>

<p>「組織設計」って言葉は、個人的にはあまり耳慣れない言葉でした。
組織を設計するということは、プロジェクトマネジメントのようなものなのかなと思った。</p>

<p>プロジェクトマネジメントについては、今後いろいろとやらなければならない立場なので、
お勉強中だったりする。
小規模プロジェクトからやらさせていただいているけど、
なかなか大変ですね。</p>

<p>組織設計も、他の設計と同様に、
「何を」「どのように」「どうやって」をしていくことであって
プロジェクトマネジメントも同じかなと。</p>

<p>以下、気になった言葉のメモ</p>

<ul>
<li>時間を区切って考える

<ul>
<li>時間軸から考える組織運営

<ul>
<li>目標はいつまでに達成？</li>
<li>その期間、どのように組織は変化する？</li>
<li>目標が達成されたとき、その組織はどうなる？</li>
</ul>
</li>
<li>ある一定の期間で、いろいろと変化するはず</li>
</ul>
</li>
<li>時間経過による構成員の流動

<ul>
<li>組織への流入 &ndash; 構成員をどう選ぶ？</li>
<li>組織の運営 &ndash; 構成員の品質をどう保つ？</li>
<li>組織からの流出 &ndash; 構成員が去った後どうする？</li>
</ul>
</li>
<li>戦略？戦術？

<ul>
<li>戦略：目的とリソース配分方針の設定</li>
<li>戦術：上記条件を達成するための手段</li>
</ul>
</li>
<li>戦略と戦術との本当の関係

<ul>
<li>現状のリソースと持っている戦術</li>
<li>単純な階層構造ではなく、スパイラルでフラクタルな関係にある。</li>
<li>戦略はテンポラリでプライベートなものであり、当事者以外の誰にも作れません。</li>
<li>戦術はユニバーサルで、条件さえ合うならば、他の局面でも応用可能</li>
</ul>
</li>
<li>リーンでアジャイルなスタイルを組織にも…

<ul>
<li>PDCAでまわす</li>
<li>最初からすべてを詰め込まない</li>
<li>すべての人を巻き込む</li>
</ul>
</li>
<li>状況変化への対応と問題解決のために</li>
<li>根拠とは

<ul>
<li>誰でも参照できる</li>
<li>誰が見てもそう判断できる</li>
</ul>
</li>
<li>内面化

<ul>
<li>クレイトン・クリステンセン「イノベーションのジレンマ」</li>
</ul>
</li>
<li>偉い人が「ルール」を作るだけでは誰もついてこない。</li>
<li>1ヶ月から3ヶ月で人間の価値観は変わる。</li>
<li>組織の中で気づかないうちに何がおこっているのか？</li>
<li>いかなるシステムがそれを再生産し続けているのか？</li>
<li>調査をしやすくする下地を作るために有効なあの手この手

<ol>
<li> 数会話

<ul>
<li>具体的な思考の癖がつく</li>
<li>客観的に行う習慣ができる</li>
<li>時間や労力、予算、進捗といった主観的な状況記述にコンセンサスがとれる</li>
</ul>
</li>
<li> Job Descriptionを書いてみる

<ul>
<li>「職務記述書」と呼ばれたりする。</li>
<li>たとえ実際の人事プロセスに反映されないとしても、</li>
<li>「自分たちの業務は何なのか」「どういう人材を望ましいと考えているのか」の
  コンセンサスをとってみる。</li>
<li>技能的側面 + 情意的側面 = 能力

<ul>
<li>(competency) + (personality) = (Ability)</li>
</ul>
</li>
</ul>
</li>
<li> Evidence Based Scheduling

<ul>
<li>Joel Spolsky氏提唱</li>
<li>各タスクにかかる時間を測定し、それらのデータから統計的に作業時間を見積もる。</li>
<li>「Joel on Software」</li>
</ul>
</li>
<li> 「射撃しつつ前進」

<ul>
<li>とりあえずやれることをやるだけやってみる！

<ul>
<li>「試験的に」／「この部分だけ」／「ちょっとの間」</li>
<li>改善策を最初から完璧に実行しない</li>
<li>正負に関わらず、どんなフィードバックがあるかを冷静に観察する</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>何が起こっているのかを把握する。</li>
<li>これらの方法だけでは、問題を解決しません。</li>
<li>何が起こっているのかを知る手がかりの一部を教えてくれるし、
  原因追求を可能にする「土壌」を作ってくれる。</li>
</ul>


<h3>メインセッション感想</h3>

<p>今回はすごい回でした。
自分の理解している事、理解不足の事、
初めて聞く言葉も結構多かったですけど、
いろいろ感じるところがありました。</p>

<p>「何を」「どのように」したいのかを考える前提があって
アプリケーションだったりプログラムだったり組織だったり、
いろいろな場面で「設計」が役に立つこと。
改めて思い知らされました。</p>

<p>あとは、<a href="http://www.amazon.co.jp/dp/4274066304">Joel on Software</a>読むべし。</p>

<h2>LT</h2>

<p>今新潟で勢いのある「ウォーターセル」勢から、
いろいろとLTがありました。</p>

<p>「PHP駆逐！」だったり、「iPadすげー」だったり、
面白いセッションでした。</p>

<h2>懇親会</h2>

<p>所用があったので、懇親会は欠席となりました。
NDS（Niigata Developer&rsquo;s Shinnenkai: 新潟開発者新年会）も行われたのに、
参加できなかったのが心残り。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Vacuum について]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/01/11/postgres_vacuum/"/>
    <updated>2014-01-11T21:22:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/01/11/postgres_vacuum</id>
    <content type="html"><![CDATA[<p>とあるシステムの障害に巻き込まれてしまって、
いろいろ対応したので、メモします。</p>

<p>簡単にいうと、PostgreSQLのデータ空き容量の確保についてのメモです。</p>

<!-- more -->


<h2>今回の環境</h2>

<ul>
<li>OS: CentOS 5.5</li>
<li>DB: PostgreSQL 8.1.23</li>
</ul>


<h2>PostgreSQLのオブジェクトファイルの場所</h2>

<p>デフォルトでは、 /var/lib/pgsql/data/base 配下にあるようです。
PostgreSQLのディスク使用量は、以下のコマンドで取得しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /var/lib/pgsql/
</span><span class='line'># du -h --max-depth=1</span></code></pre></td></tr></table></div></figure>


<p>実際のオブジェクトファイル名は、オブジェクトID（数字）のため、
ファイル名とテーブル名等の対応がわからないと、
どのテーブルがどれだけディスクを消費しているのかわかりません。</p>

<h2>オブジェクトファイルサイズの確認</h2>

<p>以下のpsqlコマンドから、SQLを使ってオブジェクトファイルのサイズを取得しました。
$DBUSER, $DBNAME, $FILENAME は適宜置き換えてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>psql -U $DBUSER $DBNAME -c 'SHOW block_size;'
</span><span class='line'>psql -U $DBUSER $DBNAME -c 'SELECT relname, relfilenode, ROUND(relpages*8/1024.0,2) AS MB FROM pg_class WHERE relpages &gt; 1 ORDER BY relpages DESC;' &gt;&gt; $FILENAME</span></code></pre></td></tr></table></div></figure>


<p><code>SHOW block_size</code> でまずは、ブロックサイズの確認です。
デフォルトは8キロバイト(8192)です。</p>

<p>pg_class カタログには、テーブルの他にもインデックスやビューなどを目録にしているそうです。
relnameがテーブル等の名前、relfilenodeがディスク上のファイル名、
&ldquo;relpages * ブロックサイズ&#8221;がディスク上のサイズとなります。
MB での表記にして、おおよその容量を取得しています。
（※ <code>8192/(1024*1024) = 8/1024</code> となります。）
ちなみに、relpages自体は、プランナで使用される単なる推測値のようです。</p>

<h2>vacuum と reindex</h2>

<p>今回は、容量のほとんどをpostgresqlが使っていたため、
以下のことをして、対処しました。</p>

<ol>
<li>巨大なindexを一旦dropして空き容量確保。</li>
<li>不要なデータの削除。</li>
<li>テーブルに対して、vacuum fullの実行。</li>
<li>vacuumするとindexが肥大化するので、reindexを実行してindexの再構築。</li>
<li>dropしたindexを再作成。</li>
</ol>


<p>最初に巨大なindexをdropして、空き容量を確保しました。
容量の大きい順で10個drop。主キーのindexはdrop対象から除いています。
空き容量を確保したことでサーバが応答し始めました。まずは、応急処置としての対応となります。</p>

<p>応急処置だけでは、応答し始めたとしても応答自体の速度はよくありません。
index削除しただけですから。
そこで、不要なデータを削除して、vacuum fullを試みました。</p>

<p>postgresql 8.1だったので、vacuum fullは、かなりの時間がかかります。
本当はclusterを使いたかったのですが、容量の関係等もあって断念。
テーブル毎に時間をかけながらvacuum fullです。
vacuum fullすると、indexのサイズが大きくなるので、
併せてreindexも実行します。</p>

<p>全てのテーブルとインデックスに対処したら、
最初にdropしたindexを再作成して完了です。</p>

<h2>定期的なvacuum</h2>

<p>さて、このままだと、月日が経てばまた同様の症状が発生することが目に見えていました。</p>

<ul>
<li>不要なデータがたまり続けてしまうかも？</li>
<li>定期的なvacuumが機能していない？</li>
</ul>


<p>こんなことは、構築時に担当者なりが事前にチェックするものですが、
どこかの時期もしくはどこかのタイミングで止まってしまったのかもしれません。</p>

<p>vacuum fullを毎日実行するとかは非現実的ですので、
まずは、vacuumがうまく機能させるためにFSMの適正化や実行タイミングを調査して設定。
そして、週末の負荷があまりない時間帯にclusterを定期実行するように設定しました。</p>

<h2>vacuum fullの補足</h2>

<p>vacuum fullは9.0から方式が変更になっている。
詳細は<a href="http://wiki.postgresql.org/wiki/VACUUM_FULL/ja">こちら</a>をご確認いただきたい。</p>

<p>9.0からはCLUSTERに似た実装になっているため、
9.0以降のvaccum fullは実行速度が速くなったかわりに、十分な空き容量が必要になります。
つまり、容量不足の場合は、事前にindexの削除等で十分な空き容量を空ける必要があります。</p>

<h2>参考</h2>

<p><a href="http://www.postgresql.jp/document/8.1/html/catalog-pg-class.html">pg_class</a><br/>
<a href="http://wiki.postgresql.org/wiki/VACUUM_FULL/ja">VACUUM FULL/ja &ndash; PostgreSQL wiki</a><br/>
<a href="http://chulip.org/entry/2013/04/23/165535">PostgreSQLのvacuumとvacuum fullの違い &ndash; chulip.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年に向けて]]></title>
    <link href="http://kasacchiful.github.com/blog/2014/01/05/new_year/"/>
    <updated>2014-01-05T22:47:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2014/01/05/new_year</id>
    <content type="html"><![CDATA[<p>あけましておめでとうございます。</p>

<p>昨年末から「風邪をひく」「左足小指が腫れて歩くと痛い」という症状があり、
久々のお休みにも関わらず、有意義なお休みにならないのが残念です。</p>

<p>個人的な今年の目標は、「健康第一」。
昨年は、いろいろあってしばらくお休みしていた時期もありました。
まだ身体が完治していない状況ですので、
まずは完治して心身ともに健康であることが一番かなと。</p>

<p>後は、増えすぎた体重を落とすことでしょうか。
落とす方法等まだ考えがまとまっていないので、後日考えをまとめてみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS34に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/11/18/nds34/"/>
    <updated>2013-11-18T23:36:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/11/18/nds34</id>
    <content type="html"><![CDATA[<p>第34回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no34">第34回勉強会(2013/11/16) &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは、「Google Analytics 基礎講座」。</p>

<!-- more -->


<h2>所感</h2>

<p>Google Analytics については、試しに使ってみる程度で
うまく活用する場面がなかったので、内容は結構新鮮に聞けました。</p>

<p>KPIとかは、サイト解析だけではなく
仕事で普通に使える考え方なので、今後も活用していきたいです。</p>

<h3>KPI</h3>

<p>KPIとは目標に直結する指標のこと</p>

<ul>
<li>KPI: Key Performance Indicator</li>
<li>目標から逆算して設定する</li>
<li>このKPIをアクセス解析ツールでモニタリングする

<ul>
<li>例：商品ページ閲覧数</li>
<li>フォーム落ち率</li>
<li>ギフトオプションページ閲覧数</li>
<li>商品ページ更新頻度</li>
<li>新規訪問者数、リピート訪問者数</li>
</ul>
</li>
</ul>


<p>KPI以外にも、KGIやKSFなどもあるようなので、あとで確認ですね。</p>

<ul>
<li>KGI: Key Goal Indicator</li>
<li>KSF: Key Success Factor</li>
</ul>


<p>以下、私なりに例を挙げてみました。</p>

<h4>例：目標からKPIを考える</h4>

<ul>
<li>80kgから-10kg減量する

<ul>
<li>消費カロリーを増やす

<ul>
<li>有酸素運動する

<ul>
<li>走る</li>
<li>泳ぐ</li>
<li>自転車をこぐ</li>
<li>エレベータを使わず階段で上がる</li>
</ul>
</li>
<li>基礎代謝を増やす

<ul>
<li>筋力トレーニングをする

<ul>
<li>腕立て伏せ</li>
<li>ダンベルあげ</li>
<li>腹筋</li>
<li>背筋</li>
<li>スクワット</li>
<li>四股</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>摂取カロリーを減らす

<ul>
<li>余分な脂肪分を減らす</li>
<li>余分な糖質を減らす

<ul>
<li>炭水化物を減らす</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>例：行動からKPIを考える</h4>

<ul>
<li>80kgから-10kg減量する

<ul>
<li>動く

<ul>
<li>動くための時間の確保

<ul>
<li>基礎代謝は10分</li>
<li>有酸素運動は1時間</li>
</ul>
</li>
<li>動くための場所の確保

<ul>
<li>基礎代謝は部屋の空間を空ける</li>
<li>有酸素運動は近所のジョギングコースを設定する</li>
</ul>
</li>
<li>有酸素運動する

<ul>
<li>走る</li>
<li>泳ぐ</li>
<li>自転車をこぐ</li>
<li>エレベータを使わず階段で上がる</li>
</ul>
</li>
<li>基礎代謝を増やす

<ul>
<li>筋力トレーニングをする

<ul>
<li>腕立て伏せ</li>
<li>ダンベルあげ</li>
<li>腹筋</li>
<li>背筋</li>
<li>スクワット</li>
<li>四股</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>食べる量を減らす

<ul>
<li>余分な脂肪分を減らす</li>
<li>余分な糖質を減らす

<ul>
<li>炭水化物を減らす</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>コツはこんな感じ。</p>

<ul>
<li>目標をブレイクダウンする</li>
<li>目標達成に必要で重要な指標を「KPI」という</li>
<li>KPIはネットに縛られる必要は無い</li>
<li>ネットで取得できるものをアクセス解析ツールなどを使ってモニタリングする</li>
</ul>


<p>他にもいろいろメモはとったけど、
うまくまとめて掲載できないので省略します。</p>

<h2>LT</h2>

<h3>Chrome拡張 CopyFlickrを更新 （@civic さん）</h3>

<p>以前からの公開済みの CopyFlickr のアップデートの告知。
実は勝間さんも使っていたとは！</p>

<p>Flickrへアップロードした画像へのリンクを取得してブログへの貼付けることが簡単なんだそうです。</p>

<p>でも、FlickrのUI刷新により、サイトが重くなって、写真の一覧がまともに使えなくなった。
そこで、Chromeの別Windowから写真の一覧が表示できるようにして、
そこから選択できるようにしたらサクサク動くようになったとのこと。</p>

<p>ブログの写真貼付に便利そうですね。</p>

<h3>お願い駆動LTのお願い （@nemuzuka さん）</h3>

<p>片桐さんのお話。</p>

<p>サーバサイド側の人もクライアントサイド側の人も
交流を深めるためにLTでどんどんお話を聞かせてくださいというお願いをしていました。</p>

<p>聞きたいこと1
Twitter Bootstrapを
素人っぽくない、ちゃんとした色合いのこつを聞きたい</p>

<p>聞きたいこと2
最強に使いやすいUI/UX/レイアウト教えて</p>

<p>聞きたいこと3
保守性の高いCSSの書き方教えて</p>

<p>もっとも聞きたいこと
エンドユーザのIEを最新にさせる口説き方</p>

<p>IEの口説き方について、なんとKPIを計画していた。
結局保守作業費用でもめるから意味ないとかなんとか。
よーくわかります。</p>

<h3>Bluetooth Low Energyで開発しよう！！ （@wdmsk さん）</h3>

<p>こちらも自己紹介でKPIを計画していた。</p>

<p>Bluetooth Low Energyが流行っているから開発しようというお話。
ウェアラブルデバイスでよく使われているとのこと。</p>

<p>開発するには、iOSではiPhone4s, iOS5から
Androidでは、OSでのサポートは4.3からとのこと。
Windowsでは、Windows 8から使えるようです。</p>

<!-- 最後は、Bluetooth Low Energyを使った
「ユニオンツール株式会社」の製品紹介になりました。
開発ツールが無償提供中なので、開発しませんかとのこと。
デモは @wdmsk さんのリアルタイム心拍数。結構高めw。
 -->


<h3>NDS開催のお知らせ （@NPoi さん）</h3>

<p>NDSやります（？）から始まった発表。</p>

<p>NDSは新潟（or 長岡）IT開発者新年会野意味で
それを無茶ぶりされたお話でした。</p>

<p>昨年度は忘年会（NDB）があったけど、今年は新年会とのことです。</p>

<ul>
<li>1月半ば以降に</li>
<li>新潟か、長岡で</li>
<li>25名前後で</li>
</ul>


<p>だそうです。</p>

<h3>Chocolatey NuGet （@nukokusa さん）</h3>

<p>yumとかaptとかの
パッケージ管理システムについて、
Windows用のパッケージ管理システムのお話。</p>

<p>PowerShellで書かれているらしい。
<a href="http://chocolaty.org">http://chocolaty.org</a></p>

<p>PowerShellのコマンド叩くだけで、管理可能とのこと。
NuGetとChefとかをうまく使えば便利かもね。</p>

<h2>懇親会</h2>

<p>懇親会も参加して、非常に楽しくお話しさせていただきました。
やっぱり関要のオードブルがうまい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS33に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/09/29/nds33/"/>
    <updated>2013-09-29T22:36:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/09/29/nds33</id>
    <content type="html"><![CDATA[<p>第33回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no33">第33回勉強会(2013/09/28) Scala入学式 &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは、「Scala入学式」。
Scalaは、結構前にコップ本買ったけど手つかずだった言語。
気になっていた存在でした。
半日がっつり勉強です。</p>

<p>ちなみに、前日27日には「<a href="http://connpass.com/event/3568/">Scala入学試験</a>」なるものも開催されていたらしい。</p>

<!-- more -->


<h2>体調がわるい</h2>

<p>勉強会の前の2日間、仕事があまりにも忙しくて飯も食わずに作業していた関係で、
眠いし腹減ってるしゲーリーだしで、実は結構体調は悪かったです。
しかも腹減っているわりには食が進まず、お昼もおにぎり1個で十分だった。</p>

<p>こんな体調で勉強会大丈夫なのか、結構不安でした。</p>

<h2>所感</h2>

<p>テキストは<a href="https://gist.github.com/Shinpeim/6740436">これ</a>。</p>

<p>かなりがっつりScalaプログラミング。
キータイプするスピードがいつもより遅い自分には
コーディングについていくのがやっと…。</p>

<p>内容は自分にとっては結構すんなりわかるものだったので、良かったです。
Optionモナドについても、ついていけばなんかわかっているつもりになっている。
このあたりは、時間があるときに改めて学習すると、モナドについてもっとよくわかるかも。
ということで、後日学習します。</p>

<p>最後の演習は、ScalaとTwitter APIで「NullPoGaBot」を作りました。
「ぬるぽ」とつぶやくと、「ガッ」とつぶやいてくれるbotです。
これも、すんなりコーディングができました。</p>

<p>講師の猫型さんの教え方がうまいおかげで、
短い時間でボリューム豊富な割に、わかりやすかったです。</p>

<h2>LT</h2>

<p>LTのまとめは、内容をほとんどメモしていなかったため省略。</p>

<h2>懇親会</h2>

<p>体調悪いくせに懇親会も参加して、非常に楽しくお話しさせていただきました。
今回も関要のオードブルがうまい。
ここ2日間、ろくに飯を食べていないせいか、
腹が減っているにも関わらず、昼はそれほど食が進まなかったけど、
肉のうまさに箸が進みました。</p>

<p>最近お酒が弱くなってきたのか、ビール2本でへろへろになってしまった。
帰りの新幹線で寝てしまった…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Niigata.rb#3に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/09/05/niigatarb3/"/>
    <updated>2013-09-05T20:36:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/09/05/niigatarb3</id>
    <content type="html"><![CDATA[<p>Niigata.rb#3に参加しました。</p>

<p><a href="http://connpass.com/event/2589/">Niigata.rb &ndash; connpass</a></p>

<p>場所は新潟市立中央図書館（ほんぽーと）。
時折勉強するために利用しています。
研修室や講演ホールもあったりします。</p>

<p>私は「初心者向けrubyの実行環境構築」について発表しました。</p>

<p>主催の @dictav さんはじめ、
みなさん凄かったですよ。</p>

<!-- more -->


<h2>テスト駆動開発は みんなの心の中にある (@kenchan)</h2>

<p><a href="https://speakerdeck.com/kenchan/tdd-will-always-be-in-your-heart">発表スライド</a></p>

<p>テスト駆動開発をどのように捉えていて、何が大切だと感じているか。
また実際にコードを書くときに何を考えているのかのお話。</p>

<ul>
<li>簡単に何度も動かせる</li>
<li>問題を一つずつ解決できる</li>
<li>現在地を見失わない</li>
<li>利用者の視点で選択できる</li>
</ul>


<p>個人的には、「現在地を見失わない」というのが興味深かったです。
TDDBCには残念ながら参加できなかった自分としては、
TDDBCの例も面白かったです。</p>

<h2>初心者向けrubyの実行環境構築 (@kasacchiful)</h2>

<p>私の発表。発表していくうちに、なんだか初心者向けになっていないようなと気づく。
もう少しまとまっていれば良かったかも。
何かツッコミがあれば、ツッコんでください。</p>

<script async="true" class="speakerdeck-embed" data-id="b5118940f4390130e8753a0acc06b0ce" src="http://kasacchiful.github.com//speakerdeck.com/assets/embed.js"> </script>


<h2>エモい話かなにか (@upinetree)</h2>

<p>TideSDKというマルチプラットフォームデスクトップアプリが作れる
フレームワークのお話。</p>

<p>作ったアプリが<a href="https://github.com/upinetree/kancolle-launcher">艦これランチャー</a>。
「艦これ」がわからない私ですが、
TideSDK自体はなかなか面白そうなネタですね。</p>

<h2>RubyMotion (@jewel_x12)</h2>

<p>RubyMotionのお話。
こちらにも艦これネタが。w</p>

<p>さらにライブコーディングのおまけ付き。
ライブコーディングはさすがですね。
Niigata.rbだけど「Perl最高！」って事で。w</p>

<h2>Redmineプラグインのテスト書いてもらえませんか？ (@two_pack)</h2>

<p><a href="http://www.slideshare.net/twopackas/20130831-25767272">発表スライド</a>。</p>

<p>「誰かテスト書いてくれる人募集」との事。
プラグインは<a href="https://github.com/two-pack/redmine_xls_export">これ</a>。</p>

<p>xlsxで出力できるプラグインを新規で作った方が需要があるような気がする。</p>

<h2>LT</h2>

<p>ほとんどの参加者がLTをやるという展開。
自己紹介LTが多かったかなと思いましたが、
今回のNiigata.rbには新潟県外参加者が半数以上という、
とてもバリエーション豊かな人たちが集まったなと思いました。</p>

<h2>懇親会</h2>

<p>最後までいたかったけど、
私は所用で途中退席しました。
短い時間ながらも楽しかったです。</p>

<p>ちなみに、クロッシング問題などの話題が挙がったので、
もう締め切られたけれど試しにやってみました。</p>

<p>内容は前の記事に挙げておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クロッシング問題を解いてみた]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/09/03/crossing/"/>
    <updated>2013-09-03T23:11:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/09/03/crossing</id>
    <content type="html"><![CDATA[<p>CodeIQにあったクロッシング問題。</p>

<p>この前のNiigata.rbの懇親会でも話題になったので、
このためにCodeIQのアカウント作ってやってみたら、
もう締めきりになっていたので、
個人的にやってみました。</p>

<p>元ネタは<a href="https://codeiq.jp/ace/yuki_hiroshi/q432">こちら</a>。</p>

<!-- more -->


<h2>実行環境</h2>

<ul>
<li>MacBook Air (Mid 2013)</li>
<li>MacOS X 10.8.4</li>
<li>Ruby 2.0.0-p195</li>
</ul>


<h2>考え方1</h2>

<p>まずは、以下のように考えてみました。</p>

<ol>
<li>素子数分の要素を持つ配列aを作成する。

<ul>
<li>[1,2,3,&hellip;,n]</li>
</ul>
</li>
<li>ファイルの素子番号順に、binary searchをして配列aのindexを得る。

<ul>
<li>indexは 0..n-1ですね。</li>
</ul>
</li>
<li>配列aから要素番号に該当する要素を削除する</li>
<li>各々得られたindexを加算すると、求める値が得られる。</li>
</ol>


<p>コードは以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">start_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bsearch</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span>
</span><span class='line'>  <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">&lt;</span> <span class="n">ary</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="p">?</span> <span class="p">(</span><span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">==</span> <span class="n">ary</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="p">?</span> <span class="n">mid</span> <span class="p">:</span> <span class="n">bsearch</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fname</span> <span class="o">=</span> <span class="s2">&quot;./crossing.txt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">j</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">rewind</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tops</span> <span class="o">=</span> <span class="o">[*</span><span class="mi">1</span><span class="o">.</span><span class="n">.j</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cross</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">bsearch</span><span class="p">(</span><span class="n">tops</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cross</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">tops</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">cross</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start_time</span>
</span></code></pre></td></tr></table></div></figure>


<p>交差点数は24,689,222,839。<br/>
実行速度は約9.9秒。</p>

<p>プロファイリングをすると、やはり、binary search と delete_at で時間がかかっています。</p>

<p>別のアルゴリズムを考える必要がありそうです。</p>

<h2>考え方2</h2>

<p>出力元と出力先の素子番号が同じように並んでいるのであれば、交差点はありません。
しかし、そのうち2つが入れ替わっていると、交差点は1つ発生します。</p>

<p>そこで、出力先の素子番号のファイルを読み込んで
それがソート中に数値が入れ替わった分が交差点数になると考えました。</p>

<p>今回はマージソートでやってみました。</p>

<p>コードは以下。
マージソートの部分はWikipediaからパクりました。(^^)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">start_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="vi">@cross</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span> <span class="n">lst</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">msort</span> <span class="n">lst</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">msort</span> <span class="n">lst</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">lst</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">=</span> <span class="n">lst</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lst2</span> <span class="o">=</span> <span class="n">lst</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">),</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst2</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge</span> <span class="n">lst1</span><span class="p">,</span> <span class="n">lst2</span>
</span><span class='line'>  <span class="n">len1</span><span class="p">,</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">lst1</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">lst2</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">len1</span> <span class="o">+</span> <span class="n">len2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">lst1</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="n">lst2</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">break</span> <span class="k">unless</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len1</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">lst1</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@cross</span> <span class="o">+=</span> <span class="p">(</span><span class="n">len1</span> <span class="o">+</span> <span class="n">k</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">break</span> <span class="k">unless</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">len2</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="n">lst2</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len1</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">lst1</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">len2</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">lst2</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fname</span> <span class="o">=</span> <span class="s2">&quot;./crossing.txt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">merge_sort</span> <span class="n">a</span>
</span><span class='line'>  <span class="n">pp</span> <span class="vi">@cross</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start_time</span>
</span></code></pre></td></tr></table></div></figure>


<p>交差点数は24,689,222,839。<br/>
実行速度は約1.7秒。</p>

<p>これで、速度要件は満たしました。
でも、クロッシング社の要求は速ければ速いほどいいということなので、
もっと速いアルゴリズムを考えた方がいいのでしょうけれど、
とりあえずこれまでとします。</p>

<h2>JRubyで実行してみる</h2>

<p>考え方1をJRuby 1.7.4(1.9.3p392)で実行してみると、
実行速度は約6.8秒。</p>

<p>考え方2を同じようにJRuby 1.7.4で実行してみると、
実行速度は約2.4秒。</p>

<p>考え方1はJRubyが速いけど、考え方2はRubyが速いのは、なかなか興味深いですね。</p>

<h2>まとめ</h2>

<p>結局、解答は提出できなかったので、本当にあっているのかどうかはわかりません。
また、Cなどruby以外の言語であれば、実行速度は変わってくると思います。</p>

<p>最近プログラミングしてなかった自分としては、
他の言語についてじっくり考える余裕がなかったのは残念です。
でも、速度向上を得るためにアルゴリズムについて考えることは最近できてなかったので、
とても参考になりました。</p>

<p>別のアルゴリズムでさらに効率的にできるのであれば、学びたいと思います。</p>

<p>アルゴリズムは奥が深い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS32に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/07/06/nds32/"/>
    <updated>2013-07-06T13:36:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/07/06/nds32</id>
    <content type="html"><![CDATA[<p>仕事が忙しくなる中、MacBook Pro (Mid 2009) から MacBook Air (Mid 2013) に買い替えて、初更新。</p>

<p>さて、第32回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no32">第32回勉強会(2013/07/06) Githubハンズオン &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは、「やさしいGithubハンズオン」。
Github Pages 使っていますが、Githubそんなに使いこなしていないので、改めてお勉強です。</p>

<!-- more -->


<h2>やったこと</h2>

<ul>
<li>VCS、SCMのお話</li>
<li>Githubのお話</li>
<li>Githubページの作成</li>
<li>SourceTreeのお話</li>
<li>SourceTreeを使ってGithubページを更新</li>
<li>ペアのGithubページのリポジトリをfork、pull request</li>
</ul>


<h2>所感</h2>

<p>本日の講師は @dictav さん。ありがとうございました。
デザイナー向けということで、Gitのコマンドをがりがり使うのではなく、
SourceTreeを使って、GUIで操作しましょうという流れでした。</p>

<p>Gitを初めて使う方でも、非常にわかりやすい内容だったと思いました。</p>

<h3>GitHub Pages</h3>

<p>今回のハンズオンでは、GitHub Pages上のファイルを更新して、
GitとGithubを操作することに。</p>

<p>ちなみに、リポジトリ名を&#8221;(username).github.io&#8221;にすると、Github Pagesを<br/>
<a href="http://">http://</a>(username).github.io/<br/>
で公開できます。
ほかの名前だと、サブフォルダ<br/>
<a href="http://">http://</a>(username).github.io/(&ldquo;リポジトリ名&rdquo;)<br/>
として公開できます。</p>

<p>本ブログは、GitHub Pagesを使っているので、
ハンズオン用のリポジトリを新規作成して、そのGithub Pagesを作りました。</p>

<h3>Pull Request</h3>

<p>また、Githubも使って、pull requestも試しました。
pull requestやったことなかったので、
いい経験になりました。</p>

<p>pull requestって、コードレビューしないとソース変更を取り込む判断ができないから、
pull requestの考え方をうまく開発業務に活用できると
コードレビューの文化を浸透できるのではないかと感じています。
面白いですよね。</p>

<h3>SourceTreeのWindows版とMac版の違い</h3>

<p>あと、SourceTreeのWindows版とMac版で操作感が違うらしい。
自分はMac版でハンズオンしていたのですが、
途中、Windows版で画面が違っていて、うまく先に進めないトラブルが。</p>

<p>@dictav さんの資料では、Mac版の画面が使われていましたが、
急遽 @masaru_b_cl さんがWindows版の設定方法を説明されました。</p>

<p>自分も、仮想マシンのWindows 7を起動して
Windows版SourceTreeをインストールしてみようかと実施してみましたが、
インストール途中で.NET Framework 4.5のインストールを求められたので、
急遽キャンセル。
会場で動作確認をすることはあきらめました。</p>

<p>別途Windows 8にSourceTreeをインストールしてみて、
Windows版SourceTreeを試してみたいと思います。</p>

<p>個人的には、WindowsでもMacでも、GUIでGitを扱えるSourceTreeには、
社内にGitを普及させる手段として有用だと思うので、
結構期待しています。</p>

<p>補足ですが、ブランチ名に日本語が普通に使えることにびっくりした。</p>

<h3>LT</h3>

<p>ハンズオン後のLTも面白かった。
要求仕様の件についての話があったけど、本当によくある話。
どの業界でも同じように発生するんだろうなぁ。</p>

<p>facebookページについても、うまく活用できれば
費用対効果の高い広報ができると感じました。
それにしても、facebook使っている人って、
結構真面目にプライベート情報を入力しているのかな？</p>

<p>それにしても、今回はジャンルが多彩な面々が集まってきた会だったので、
いろんなお話が聞けて楽しかったです。</p>

<p>LTの内容のメモ：</p>

<h4>はじめてのnode.js</h4>

<p>@sasaplus1さんの発表。<br/>
nodebrewを使って、node.jsとnpmをインストールして、
node.jsの環境を整える内容。</p>

<p>ちなみに、発表者の@sasaplus1さん曰く、
「何を言ったか全く覚えていないんですけど、スライドのページ切り替えるたびに、@kasacchifulさんが笑っているのを見て安心したことだけ覚えています。」
と、帰りの新幹線で言われました。</p>

<p>俺そんなに笑っていたかな？まぁ、落ち着けてくれたのは良かったけどね。</p>

<h4>趣味Git</h4>

<p>@upinetreeさんの発表。<br/>
オートセーブ機能があるゲーム「MineCraft」のセーブデータをGitで管理して、
いつでも特定の地点に戻れるようにしていた。</p>

<p>Githubを使って、お互いのセーブデータを共有化する⇒ソーシャルゲームの流れが面白い。</p>

<h4>実録！とりあえずが生む悲劇。</h4>

<p>@植木さんの発表。<br/>
「とりあえず」って言葉、よく仕事で飛び交っています。
本当に危険であることが身にしみています。
うまくいなさないと駄目ですね。</p>

<h4>高校生長岡ラーメン選手権の告知</h4>

<p>@hiro55bsさんの発表。<br/>
高校生長岡ラーメン選手権の告知なのですが、
その広報に使用しているFacebookページについて。</p>

<p>Facebookユーザって素直なのか、
ユーザ自身の登録内容が正直に登録されているらしく、
広告を出す対象を細かく設定できる点がすごい。</p>

<p>Facebookのいい面とこわい面の両方が見れた気がした。
でも有効活用すると、費用を安く済ませながら高い効果が見込めそうだ。</p>

<h4>Keynote+Gimpでアイコン作成</h4>

<p>@makomeganeさんの発表。<br/>
KeynoteとGimpを使ってアイコンを作成したお話。</p>

<p>簡単な図形を使うだけで、結構いいアイコンが作れたりする。
そして必然的にフラットデザインに。</p>

<h4>Rでダイエット</h4>

<p>@salinger001101さんの発表。<br/>
R=統計くらいのイメージしかなかった。実際統計で使うのがメインだけど。
Rの統計データを作るためにダイエットして、その体重変化などをソースにしていた。
しっかり痩せていたのは感動です。</p>

<h4>VCS入門ができるまで</h4>

<p>@masaru_b_clさんの発表。<br/>
VCS入門を作成した際に文章まとめて公開するまでの流れがわかりやすい。</p>

<ul>
<li>自分の知っている情報を全部出す</li>
<li>情報を分類、整理

<ul>
<li>足りない情報はWeb調査</li>
</ul>
</li>
<li>文書の目標設定</li>
<li>説明の道筋を考える</li>
</ul>


<p>これは、普段の仕事にも言えることですね。</p>

<h4>WordBench勉強会</h4>

<p>Wordpressの勉強会やっているよっていうお話。</p>

<h4>SmartArt</h4>

<p>PowerPointなどのSmartArtを使って、
簡単に作図しようとのお話。</p>

<p>自分はついこの間までOffice2003使っていたため、SmartArtは使ったことがなかったが、
会社の先輩がよく使っていたので聞いたことはある程度。</p>

<p>Officeなくても、Skydriveで使えるとのこと。
Skydriveは便利なので、よくお世話になっているのですが、
SmartArtもあるそうなので、今後うまく活用させていただきます。</p>

<h4>NDSからの大切なお知らせ</h4>

<p>最後に主催の@civicさんからのお話。<br/>
「プロジェクト・アンブレラ」「それNDSでできるよ！」</p>

<h3>懇親会</h3>

<p>懇親会も参加して、非常に楽しくお話しさせていただきました。
ビアバッシュ形式で、オードブルの関要のお肉やお酒がうまかった。
次回と次々回のNDS開催についても話題が挙がり、とても期待しています。</p>

<p>ただワイン飲みすぎたみたいで結構酔っぱらった状態になり、
早く帰らないと怒られそうなので、2次会は不参加…。</p>

<p>帰りは、 @sasaplus1 さんと @makomegane さんと
新幹線で新潟に帰りました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS31に参加しました。]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/04/12/nds31/"/>
    <updated>2013-04-12T16:15:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/04/12/nds31</id>
    <content type="html"><![CDATA[<p>第31回NDS（長岡開発者勉強会）に参加しました。</p>

<p><a href="http://nagaoka.techtalk.jp/no31">第31回勉強会(2013/04/06) &ndash; 長岡 IT開発者 勉強会(NDS)</a></p>

<p>今回のテーマは「はじめての～」ということで、
春に入学や入社した方に対しての内容が集まりました。
とはいえ、参加者のほとんどが（私を含め）どうみてもベテランな雰囲気の方ばかり。
それでも発表内容はとても面白かったです。</p>

<!-- more -->


<h2>感想</h2>

<p>いろいろありましたけど、個人的にはWindows ストアアプリ開発が特に面白かった。
NDSの会場に行く直前にWindows 8 proを個人的に購入したため、
「Windows ストアアプリ」への関心がぐっとくるものがありました。
Surfaceかっこいい！
Visual Studio Expressも導入しなきゃ。</p>

<p>あと、テスト技法入門も @two_pack さんが
簡単にまとめてくれたので（実際には技法についてはほとんどしゃべっていないけど）
非常にわかりやすかったです。</p>

<h2>私も発表</h2>

<p>NDSには2回目の参加なのですが、私も発表しました。
参加申込の際に書いた欄の中で、
発表について「時間があればRubyについてしゃべります」と書いちゃったもんだから、
Twitterで「Rubyの発表してくださいよ～」とつぶやかれ、
発表日当日にせこせことスライドを作るという状況になったわけです。</p>

<p>私の発表内容は、「私のRubyの始め方」と題して、
私がRubyをはじめたきっかけと、どのように学習してきたかについて
簡単に発表しました。</p>

<script async="true" class="speakerdeck-embed" data-id="9a5f434083f301307e181231392d897a" src="http://kasacchiful.github.com//speakerdeck.com/assets/embed.js"> </script>


<p>当日にスライドつくるような状況ですので、自分でいうのもなんですが、
あまりまとまっていないと思います。
発表自体もぐだぐだだったような…。</p>

<p>内容自体は結構古い内容もあります。</p>

<p>簡単にまとめると、</p>

<ul>
<li>何かのきっかけで興味がわきます</li>
<li>私の場合は、勉強会がきっかけ</li>
<li>勉強会のあとは、書籍と雑誌でこつこつと</li>
<li>「とりあえずやってみる」という精神が大事</li>
</ul>


<p>何かのきっかけや出会いによって、
「Rubyはじめた！」「Perlはじめた！」「勉強会参加した」
となって、人は動いていくのではないかと自分は信じています。
自分がNDSに参加したきっかけも
「Niigata.rb」と「NDB（新潟開発者忘年会）」に参加したことから生まれたものです。</p>

<p>これをきっかけにしてRubyを始めてくれる人がいればうれしいかぎりです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Niigata.LLに参加しました]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/04/02/niigata-ll/"/>
    <updated>2013-04-02T10:32:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/04/02/niigata-ll</id>
    <content type="html"><![CDATA[<p>2013年3月23日（土）に長岡のまちなかキャンパスで、
Niigata.LLが開催されました。</p>

<p><a href="http://www.dictav.info/NiigataLL/">NiigataLL by dictav</a></p>

<h2>私の発表</h2>

<p>私は、PowerShellについてしゃべりました。</p>

<!-- more -->




<script async="true" class="speakerdeck-embed" data-id="c31daca075f50130119912313b10071a" src="http://kasacchiful.github.com//speakerdeck.com/assets/embed.js"> </script>


<p>本当は、Ruby 2.0 と Rails 4.0についてしゃべろうかと思いましたが、
スライド作ってみるとイマイチぱっとしない。</p>

<p>そこで、社内向けに密かに作っていたPowerShellのスライドを
Niigata.LL向けにカスタマイズして、発表しました。</p>

<p>ただ、スライド作り始めたのが発表の前日で、
Niigata.LLが始まってもまだできずに、
他の人の発表の合間に作り続けるはめになりました。</p>

<p>体調も良くなかったので、
発表も何しゃべったのかほとんど覚えていませんが、
ほとんどMacの中でウケは良かったと思います。</p>

<p>PowerShellも使い方によっては、LLっぽく振る舞える感じがいいですよね。</p>

<h2>Niigata.LLの感想</h2>

<p>体調不良もあり、あまり覚えていないのですが、簡単に。</p>

<ul>
<li>新潟にはJavaScriptのユーザが少ない</li>
<li>新潟にはLispのユーザが少ない</li>
<li></li>
<li>新潟にはLightweight Languageのユーザが少ない</li>
</ul>


<p>みたいな謳い文句で始まったみたいですが、
席も満席で技術者いっぱいいるじゃんという感じ、
そして和気あいあいな雰囲気がとても良かったです。</p>

<p>また、こういう勉強会はいろんな技術が集まってくるので、
非常に参考になります。</p>

<p>新潟も捨てたもんじゃないな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JaSST'13 Niigataが開催されました]]></title>
    <link href="http://kasacchiful.github.com/blog/2013/03/30/jasst13niigata/"/>
    <updated>2013-03-30T20:02:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2013/03/30/jasst13niigata</id>
    <content type="html"><![CDATA[<p>最近体調が悪くて、なかなか文章書ける状態ではなく、
新年迎えるにあたって始めたこのブログも、
気づけばすでに3月まで何も書かないという、
なんとも体たらくな感じですが、よろしくお願いします。</p>

<p>体調見ながら、少しずつ書いていきます。</p>

<h2>JaSST&#8217;13 Niigata が開催されました</h2>

<p>2013年3月15日（金）に、にいがた産業創造機構で
JaSST&#8217;13 Niigataが開催されました。</p>

<p><a href="http://www.jasst.jp/symposium/jasst13niigata.html">JaSSTソフトウェアテストシンポジウム-JaSST&#8217;13 Niigata</a></p>

<!-- more -->


<p>今回で3回目の新潟開催ですが、
私は今回から実行委員として開催運営に携わることになりました。</p>

<p>受付とかしていたので、講演全部聞いていた訳ではないので、
講演内容は実行委員長のコラムをご覧ください。
（ちょっと投げやりな感じですが、ご了承ください）</p>

<p><a href="http://el.jibun.atmarkit.co.jp/obbligato/2013/03/jasst13-niigata-34c4.html">オブリガート ～感謝されるテストエンジニアになる～: ソフトウェアテストシンポジウム「JaSST&#8217;13 Niigata」開催レポート（その1）――テストを難しくさせているもの</a></p>

<p>講演内容が丁寧に書かれているので、
非常に読みやすいと思います。</p>

<h2>JaSSTを開催して思った事</h2>

<p>実は、1月のJaSST&#8217;13 Tokyoにも参加しました。
新潟と開催規模が全然違うので単純に比較できませんが、
東京でも新潟でもソフトウェアテストでかなりの人が集まるわけです。</p>

<p>ソフトウェアテストで人が集まるということは、
ソフトウェアテストで悩んでいる人がかなりいるのではないかと思います。</p>

<p>私もソフトウェアテストで悩んでいる一人です。</p>

<p>書籍を読んだり、勉強会参加したりするほど、
ソフトウェアテストは開発工程の1フェーズにとどまらない、
開発工程全体に深く関わっている存在であると認識させられます。</p>

<p>そして、ソフトウェアの品質向上には無くてはならないものでもあります。</p>

<p>今回のJaSST&#8217;13 Niigataでは、
上流から始めるテスト開発というテーマで
初めての実行委員として運営に携わりました。</p>

<p>ただ、ソフトウェアテストは
色々な事を想定しなければいけない分野だと思いますので、
次回以降も皆様にとって価値のある時間になるように
実行委員一同頑張っていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressを使ってブログを書いてみた]]></title>
    <link href="http://kasacchiful.github.com/blog/2012/12/20/new-blog-using-octopress/"/>
    <updated>2012-12-20T22:54:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2012/12/20/new-blog-using-octopress</id>
    <content type="html"><![CDATA[<p>前も書いたけど、新しい年を迎えるにあたって何か新しい事を始めたかったのです。
そんなとき、Octopressで技術系ブログを書き始めることを思い立ちました。</p>

<!-- more -->


<h2>なぜ技術系ブログを書くのか</h2>

<p>自分は文章を書くのが苦手です。
開発プロジェクトに関わる際にもっとも苦手な事が、ドキュメントを作成する事。</p>

<p>自分は新潟のSIerで働くエンジニアです。
最近は、プログラミングよりもドキュメント作成が主な仕事になってきました。
でも、苦手なドキュメント作成は、何をどのようにまとめたらよいのか混乱する事が多く、時間がかかります。
工数が非常にかかっている。</p>

<p>仕事にかかる時間は人生の多くを占めるのだから、
この現状を少しでも改善できたら、
人生もっとハッピーになれるのではないか。</p>

<p>またエンジニア故に、
自分が携わった技術に関して文章にうまくまとめる事ができたら、
このブログを見て悩みを解決できる人が増えて
自分以外の人もハッピーになれるのではないか。</p>

<p>文章が下手でうまく伝わらないかもしれないけど、
少しずつ書き留めていきたいと思います。</p>

<h2>なぜOctopressにしたのか</h2>

<p>技術系ブログを書き始めるにあたり、
はてなブログなどのブログサービスを使えばすぐ始められると思いましたが、
それでは何か足りないと感じました。
せっかくなので、新しい事をもっとしたいと。</p>

<p>そんななか、最近はOctopressを使っているページをよく見かけるようになりました。
Octopressを調べてみると、興味をそそられました。</p>

<ul>
<li>markdownで記述し、静的ページを作成する</li>
<li>github pagesにgitを使って記事を公開する</li>
<li>Octopress自身はrubyで書かれている</li>
</ul>


<p>markdownはほとんど使った事が無いのですが、調べてみるとシンプルに文書構造を定義できそうな印象を持ちました。
文章を書く事が苦手な自分にとって、文書構造を考えやすくなるのはいいことではないかと考えました。</p>

<p>githubについては、アカウントがあるのですがほとんど使って無く、
gitも仕事で使うプロジェクトに関わっていないため、
gitおよびgithubの使い方に慣れておくにはとてもいいと考えました。</p>

<p>また、ruby好きの自分にとって、
Octopressがrubyで書かれているのは、勉強ネタとしても良いネタではないかと考えました。
いざとなったら、自分でいじれるし。</p>

<p>そういうわけで、Octopressを使ってみる事にしました。</p>

<h2>環境の構築</h2>

<p>Octopressを使ったブログを構築しました。
マシンは自分のMac。Rubyはrvmで1.9.3を構築。gemsetはoctopress用に作成しました。
環境の構築については公式サイトを見てやったのですが、
他にもいろいろと書かれていますので、割愛します。
思ったよりも簡単です。</p>

<ul>
<li><a href="http://shogo82148.github.com/blog/2012/03/21/test/">GitHubにブログを設置してみたよ &ndash; Shogo&rsquo;s Blog</a></li>
<li><a href="http://www.sankitch.me/blog/2012/05/05/build-octopress-on-github-dropbox/">Octopress + Github Pages + Dropbox でブログを構築 &ndash; M-x sankitch-info</a></li>
<li><a href="http://os0x.github.com/2012/04/01/new-blog/">Octopressとgithub Pagesを使ったブログ &ndash; 0xff.toBlog()</a></li>
<li><a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm">Big Sky :: githubとjekyllとoctopressで作る簡単でモダンなブログ</a></li>
<li><a href="http://tokkono.cute.coocan.jp/blog/slow/index.php/programming/github-pages-almost-perfect-guide/">GitHub Pagesホスティングサービス（ほぼ）完全活用ガイド | ゆっくりと…</a></li>
</ul>


<p>このブログはgithub pages上にdeployしています。
Octopressはこのdeployについてもコマンドで簡単にできます。
プレビューも見れるので、意外と便利。
ブログはHTML5で作成されるため、HTML5の勉強にもなりそうです。</p>

<p>いろいろいじれそうで、その点についてもわくわくするのですが、
いじることに夢中になりすぎて時間を取られすぎないようにしたいです。</p>

<h2>まとめ</h2>

<p>これからがスタートです。</p>

<p>Octopressしかり、gitしかり、githubしかり、markdownしかり。</p>

<p>これらのツールに携わりながら
苦手な文章作成を少しずつ改善していきたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最初のOctopress]]></title>
    <link href="http://kasacchiful.github.com/blog/2012/12/17/hello_octopress/"/>
    <updated>2012-12-17T00:38:00+09:00</updated>
    <id>http://kasacchiful.github.com/blog/2012/12/17/hello_octopress</id>
    <content type="html"><![CDATA[<p>もうすぐ新しい年になるので何か新しい事でも始めようかと思ったところ、そういえば技術系のブログを書いた事が無かったので、せっかくなので少しずつ書いていこうと思います。</p>

<p>なぜ、Octopressを使うことにしたのかは、後ほど。</p>
]]></content>
  </entry>
  
</feed>
